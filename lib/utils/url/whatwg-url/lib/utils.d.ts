declare function isObject(value: null): boolean;
declare function hasOwn(obj: any, prop: PropertyKey): boolean;
declare function getSameObject(wrapper: any, prop: string, creator: () => any): any;
declare function wrapperForImpl(impl: any): any;
declare function implForWrapper(wrapper: any): any;
declare function tryWrapperForImpl(impl: any): any;
declare function tryImplForWrapper(wrapper: any): any;
declare function isArrayIndexPropName(P: any): boolean;
declare function isArrayBuffer(value: any): boolean;
declare const _default: {
    isObject: typeof isObject;
    hasOwn: typeof hasOwn;
    wrapperSymbol: symbol;
    implSymbol: symbol;
    getSameObject: typeof getSameObject;
    ctorRegistrySymbol: symbol;
    wrapperForImpl: typeof wrapperForImpl;
    implForWrapper: typeof implForWrapper;
    tryWrapperForImpl: typeof tryWrapperForImpl;
    tryImplForWrapper: typeof tryImplForWrapper;
    iterInternalSymbol: symbol;
    IteratorPrototype: any;
    isArrayBuffer: typeof isArrayBuffer;
    isArrayIndexPropName: typeof isArrayIndexPropName;
    supportsPropertyIndex: symbol;
    supportedPropertyIndices: symbol;
    supportsPropertyName: symbol;
    supportedPropertyNames: symbol;
    indexedGet: symbol;
    indexedSetNew: symbol;
    indexedSetExisting: symbol;
    namedGet: symbol;
    namedSetNew: symbol;
    namedSetExisting: symbol;
    namedDelete: symbol;
};
export default _default;
